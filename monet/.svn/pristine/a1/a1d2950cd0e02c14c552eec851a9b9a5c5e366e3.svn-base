//
//  FFPrivateKeyController.m
//  FireFly
//
//  Created by hely on 2017/10/18.
//  Copyright © 2017年 NAT. All rights reserved.
//

#import "FFPrivateKeyController.h"

@interface FFPrivateKeyController ()<UIScrollViewDelegate, UITextFieldDelegate>
{
    UIScrollView * _scrollView;
    UIView       * _topView;
    UITextView   * _textView;
    UITextField  * _pwdTF;
    UITextField  * _promptTF;
    UITextField  * _confirmTF;
    UIView       * _line;
    UIButton     * _import;
}

@end

@implementation FFPrivateKeyController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self setupConfig];
    
    [self setupContent];
    
    [self setupBottom];
}

- (void)setupConfig
{
    self.view.backgroundColor = LC_RGB(245, 245, 245);
    [self.view addTapTarget:self action:@selector(tapAction)];
    
    _scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];
    _scrollView.backgroundColor = LC_RGB(245, 245, 245);
    _scrollView.contentSize = CGSizeMake(0, DDYSCREENH + 20);
    [self.view addSubview:_scrollView];
    _scrollView.delegate = self;
}

- (void)setupContent
{
    _topView = [[UIView alloc] initWithFrame:LC_RECT(0, 0, DDYSCREENW, 100)];
    _topView.backgroundColor = [UIColor whiteColor];
    [_scrollView addSubview:_topView];
    
    UILabel *tipLbl = [[UILabel alloc] init];
    tipLbl.frame = CGRectMake(20, 20, DDYSCREENW - 2 * 20, 60);
    tipLbl.font = NA_FONT(14);
    tipLbl.numberOfLines = 0;
    tipLbl.text = @"Please enter the word mnemonic";
    tipLbl.textColor = LC_RGB(102, 102, 102);
    
    _textView = [[UITextView alloc] initWithFrame:CGRectMake(20, tipLbl.ddy_bottom + 20, tipLbl.ddy_w, 100)];
    _textView.layer.borderColor = LC_RGB(227, 227, 227).CGColor;
    _textView.layer.borderWidth = 1;
    _textView.layer.cornerRadius = 2;
    _textView.keyboardType = UIKeyboardTypeNumbersAndPunctuation;
    
    _pwdTF = [[UITextField alloc] initWithFrame:CGRectMake(20, 20 + _textView.ddy_bottom, DDYSCREENW - 20 * 2, 50)];
    _pwdTF.placeholder = @"Set the password";
    _pwdTF.font = NA_FONT(14);
    _pwdTF.textColor = [UIColor blackColor];
    _pwdTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    _pwdTF.secureTextEntry = YES;
    _pwdTF.delegate = self;
    
    _confirmTF = [[UITextField alloc] initWithFrame:CGRectMake(20, 10 + _pwdTF.ddy_bottom, DDYSCREENW - 20 * 2, 50)];
    _confirmTF.placeholder = @"Confirm password";
    _confirmTF.font = NA_FONT(14);
    _confirmTF.textColor = [UIColor blackColor];
    _confirmTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    _confirmTF.secureTextEntry = YES;
    _confirmTF.delegate = self;
    
    _promptTF = [[UITextField alloc] initWithFrame:CGRectMake(20, 10 + _confirmTF.ddy_bottom, DDYSCREENW - 20 * 2, 50)];
    _promptTF.placeholder = @"Password prompt(Don't fill it)";
    _promptTF.font = NA_FONT(14);
    _promptTF.textColor = [UIColor blackColor];
    _promptTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    _promptTF.secureTextEntry = YES;
    _promptTF.delegate = self;
    
    [_topView addSubview:tipLbl];
    [_topView addSubview:_textView];
    [_topView addSubview:_pwdTF];
    [_topView addSubview:_promptTF];
    [_topView addSubview:_confirmTF];
    
    for (int i = 0; i<3; i++) {
        _line = [[UIView alloc] initWithFrame:LC_RECT(20, _pwdTF.viewBottomY + 60*i,DDYSCREENW - 20 , 1)];
        _line.backgroundColor = LC_RGB(235, 235, 235);
        [_topView addSubview:_line];
    }
    
    _topView.viewFrameHeight = _promptTF.viewBottomY + 10;
    
}

- (void)placeLabelAction
{
    
}

- (void)setupBottom
{
    _import = [[UIButton alloc] initWithFrame:LC_RECT(37.5, _topView.viewBottomY + 60 , DDYSCREENW - 75, 45)];
    [_import setTitle:@"Import" forState:UIControlStateNormal];
    _import.titleLabel.font = NA_FONT(16);
    [_import setTitleColor:LC_RGB(51, 51, 51) forState:UIControlStateNormal];
    _import.layer.cornerRadius = 45/2;
    _import.layer.masksToBounds = YES;
    _import.backgroundColor = LC_RGB(248, 220, 74);
    [_import addTarget:self action:@selector(importAction) forControlEvents:UIControlEventTouchUpInside];
    [_scrollView addSubview:_import];
    
}

- (void)importAction
{
    
    if (![self firstInputVerify]) {
        return ;
    }
    
    NSString * privateKeyDece = _textView.text;
    NSString * password =  _pwdTF.text;
    
    
    if ([privateKeyDece containsString:@" "] || [privateKeyDece containsString:@"\n"]) {
        MBProgressHUD *hud = [self showHudWithText:@"输入内容非法, 检查后重新输入"];
        hud.mode = MBProgressHUDModeText;
        [hud hideAnimated:YES afterDelay:2];
        
        return;
    }
    
    BigNumber *bigPrivateKeyDec = [BigNumber bigNumberWithDecimalString:privateKeyDece];
    NSString *privateKeyHexString = bigPrivateKeyDec.hexString;
    
    SecureData *secureData = [SecureData secureDataWithHexString:privateKeyHexString];
    
    NSData *data = [secureData data];
    
    // 检验私钥的有效性
    BOOL isValidate = [Account isValidPrivateKey:data];
    
    if (isValidate) {
        
        Account *account = [Account accountWithPrivateKey:data];
        
        BOOL hasContains = [WALLET containsAddress:account.address];
        
        if (hasContains) {
            
            MBProgressHUD *hud1 = [self showHudWithText:@"账户已经存在"];
            hud1.mode = MBProgressHUDModeText;
            [hud1 hideAnimated:YES afterDelay:2];
            
            return;
        }
        
        // 判断钥匙串中是否已经存在该映射
        
        UIWindow *keyWindow = [[[UIApplication sharedApplication] delegate] window];
        if (!keyWindow) { keyWindow = [[UIApplication sharedApplication] keyWindow]; }
        MBProgressHUD *hud0 = [MBProgressHUD showHUDAddedTo:keyWindow animated:YES];
        hud0.label.text = @"正在导入中...";
        hud0.contentColor = [UIColor whiteColor];
        [account encryptSecretStorageJSON:password callback:^(NSString *json) {
            
            [hud0 hideAnimated:YES];
            
            [WALLET addAccount:account json:json];
            [WALLET setNickname:@"PK-新钱包" address:account.address];
            NSLog(@"导入成功！");
            
            MBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:LC_KEYWINDOW animated:YES];
            hud.mode = MBProgressHUDModeText;
            hud.contentColor = [UIColor whiteColor];
            hud.label.text = @"导入成功！";
            
            [hud hideAnimated:YES afterDelay:2];
            
            // 返回到上个界面(应该是"账户管理")
            [self.navigationController popViewControllerAnimated:YES];
            
            [self postNotification:NALoginNotification];
            
            
        }];
    }
    else
    {
        //            NSLog(@"请输入有效的助记词");
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"无效的私钥" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        
    }
    
    
}

#pragma mark - rewrite the setter method of 'qrcodeMessage' property
- (void)setQrcodeMessage:(NSString *)qrcodeMessage
{
    if (qrcodeMessage && ![qrcodeMessage isEqualToString:@""]) {
        
        _textView.text = qrcodeMessage;
    }
}

#pragma mark - validation : first verify from the input content which satisfies the check like as validate input, unequal pass word etc.
- (BOOL)firstInputVerify
{
    
    if (LC_NSSTRING_IS_INVALID(_textView.text) || LC_NSSTRING_IS_INVALID(_pwdTF.text) || LC_NSSTRING_IS_INVALID(_confirmTF.text)) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"请完整填写助记词和密码" message:nil delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        return NO;
    }
    
    if (![_pwdTF.text isEqualToString:_confirmTF.text]) {
        
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"确认密码有误" message:@"请保证密码和确认密码一致" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil, nil];
        [alert show];
        return NO;
        
    }
    
    return YES;
}

#pragma mark - UIScrollViewDelegate
- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    [_scrollView endEditing:YES];
}

#pragma mark - UITextViewDelegate
- (void)textFieldDidBeginEditing:(UITextField *)textField
{
    
    _scrollView.ddy_y = -130;
}

- (BOOL)textFieldShouldEndEditing:(UITextField *)textField
{
    _scrollView.ddy_y = 0;
    
    return YES;
}

- (void)tapAction
{
    [self.view endEditing:YES];
}

@end

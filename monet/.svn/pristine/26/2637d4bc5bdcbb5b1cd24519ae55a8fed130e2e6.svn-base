//
//  NAETHViewController.m
//  FireFly
//
//  Created by hely on 2017/10/17.
//  Copyright © 2017年 NAT. All rights reserved.
//

#import "NAETHViewController.h"
#import "NAQRCodeScanningVC.h"
#import "FFAccountViewController.h"
#import "NirKxMenu.h"
#import "NAGasItem.h"

@interface NAETHViewController ()<UIScrollViewDelegate, UITextFieldDelegate>
{
    UIScrollView * _scrollView;
    NATextField  * _accountTF;
    NATextField  * _addressTF;
    NATextField  * _addressTF2;
    NATextField  * _moneyTF;
    UILabel      * _feeLbl;
    DDYButton    * _changeGasBtn;
    UISlider     * _slider;
    UIView       * _fromView;
    UIView       * _toView;
    UILabel      * _surplussLbl;
    UILabel      * _ethPriceLbl;
    UIButton     * _confirmBtn;
}

@property (nonatomic, strong) NAGasItem *gasItem;      // 消耗的两种gas

@property (nonatomic, strong) NAGasDetailItem *detailItem;     // 具体消耗的哪一种gas

@property (nonatomic, strong) NSString *nonce;  // 交易编号

@property (nonatomic, assign) CGFloat defaultSlider;

@property (nonatomic, assign) BOOL isFftGas;    // 默认消耗的是ethgas




@end

@implementation NAETHViewController

- (void)viewDidLoad {
    [super viewDidLoad];

//    self.title = @"FFT-Transfer";
    
    [self setupConfig];
    
    [self setupNavBar];
    
    [self setupScrollView];

    [self getGasData];
    
    [self setupUI];
}

- (void)setupConfig
{
    _isFftGas = NO;
}


- (void)setupNavBar
{
    //    self.title = @"ETH-转账"
    [self showRightBarBtnWithTitle:nil img:[UIImage imageNamed:@"navi_scan"]];
}

- (void)getGasData
{
    
    [NANetWorkRequest na_getDataWithModule:@"account" action:@"getGas" parameters:@{@"address": WALLET.activeAccount.checksumAddress} results:^(BOOL status, NSDictionary *result) {
        
        if (status) {
            
            NSDictionary *resultData = [result objectForKey:@"data"];
            
            [NAGasDetailItem mj_setupReplacedKeyFromPropertyName:^NSDictionary *{
                return @{@"defau" : @"default"};
            }];
            
            _gasItem = [NAGasItem mj_objectWithKeyValues:resultData];
            
            _detailItem = _isFftGas ? _gasItem.fft : _gasItem.eth;
            
            if (_slider && _feeLbl) {
                
                [self sliderReloadData];
            }
        }
    }];
}

- (void)sliderReloadData
{
    
    BigNumber *minBig = [BigNumber bigNumberWithInteger:_detailItem.min];
    BigNumber *maxBig = [BigNumber bigNumberWithInteger:_detailItem.max];
    BigNumber *defaultBig = [BigNumber bigNumberWithInteger:_detailItem.defau];
    BigNumber *weiBig = [BigNumber bigNumberWithDecimalString:@"1000000000"];
    BigNumber *limitBig = [BigNumber bigNumberWithInteger:_detailItem.gaslimit];
    
    NSDecimalNumber *minNum = [NSDecimalNumber decimalNumberWithString:[Payment formatEther:[[minBig mul:limitBig] mul:weiBig] options:0]];
    CGFloat minSlider = minNum.doubleValue;
    
    NSDecimalNumber *maxNum = [NSDecimalNumber decimalNumberWithString:[Payment formatEther:[[maxBig mul:limitBig] mul:weiBig] options:0]];
    CGFloat maxSlider = maxNum.doubleValue;
    
    NSDecimalNumber *defalutNum = [NSDecimalNumber decimalNumberWithString:[Payment formatEther:[[defaultBig mul:limitBig] mul:weiBig] options:0]];
    CGFloat defaultSlider = defalutNum.doubleValue;
    _defaultSlider = defaultSlider;
    
    [_slider setMinimumValue:minSlider];
    [_slider setMaximumValue:maxSlider];
    [_slider setValue:0];
    
    [_slider setValue:defaultSlider animated:YES];
    
    NSString *textOrign = LC_NSSTRING_FORMAT(@"矿工费用   %f %@", defaultSlider, (_isFftGas ? @"FFTER" : @"ETHER"));
    NSMutableAttributedString *attribute = [[NSMutableAttributedString alloc] initWithString:textOrign];
    [attribute addAttribute:NSForegroundColorAttributeName value:rgba(51,51,51,1) range:[textOrign rangeOfString:@"矿工费用"]];
    
    _feeLbl.attributedText = attribute;
    
}

- (void)setupUI
{
    [self setupScrollView];
    
    [self setupFrom];
    
    [self setupTo];
    
    [self setupBottom];
}



- (void)rightBtnClick:(DDYButton *)button
{
    dispatch_async(dispatch_get_main_queue(), ^{
        [DDYAuthorityMaster cameraAuthSuccess:^{
            NAQRCodeScanningVC *vc = [[NAQRCodeScanningVC alloc] init];
            vc.qrMessageBlock = ^(NSString *value) {
                
                UIViewController *vc = [self.navigationController.childViewControllers firstObject];
                
                if ([vc isKindOfClass:[FFAccountViewController class]]) {
                    
                    FFAccountViewController *accountVC = (FFAccountViewController *)vc;
                    
                    [self.navigationController popToRootViewControllerAnimated:NO];
                    
                    [accountVC handleQNResultMessageWithValue:value];
                }
                
            };
            
            [self.navigationController pushViewController:vc animated:YES];
        } fail:^{
            
        } alertShow:YES];
    });
}

- (void)setupScrollView
{
    [self.view addTapTarget:self action:@selector(tapAction)];
    
    _scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 64, DDYSCREENW, DDYSCREENH - 64)];
    _scrollView.backgroundColor = LC_RGB(245, 245, 245);
    _scrollView.contentSize = CGSizeMake(0, DDYSCREENH + 35);
    
    [self.view addSubview:_scrollView];
    _scrollView.delegate = self;
}

- (void)setupFrom
{
    _fromView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, DDYSCREENW, 150)];
    _fromView.backgroundColor = [UIColor whiteColor];
    
    UILabel *fromLbl = [[UILabel alloc] init];
    fromLbl.frame = CGRectMake(20, 20, 100, 20);
    fromLbl.font = NA_FONT(18);
    fromLbl.textColor = LC_RGB(51, 51, 51);
    fromLbl.text = @"From :";
    
    _accountTF = [[NATextField alloc] initWithFrame:CGRectMake(20, fromLbl.ddy_bottom + 10, DDYSCREENW - 20 * 2, 40)];
    UILabel *leftLbl = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 75, 40)];
    leftLbl.text = @"Account : ";
    leftLbl.textColor = [UIColor blackColor];
    leftLbl.font = NA_FONT(15);
    _accountTF.leftView = leftLbl;
    _accountTF.leftViewMode = UITextFieldViewModeAlways;
    _accountTF.placeholder = @"username";
    _accountTF.font = NA_FONT(15);
    _accountTF.textColor = [UIColor blackColor];
    _accountTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    
    _addressTF = [[NATextField alloc] initWithFrame:CGRectMake(20, _accountTF.ddy_bottom + 10, DDYSCREENW - 20 * 2, 40)];
    UILabel *leftLbl2 = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 75, 40)];
    leftLbl2.text = @"Address : ";
    leftLbl2.textColor = [UIColor blackColor];
    leftLbl2.font = NA_FONT(15);
    _addressTF.leftView = leftLbl2;
    _addressTF.leftViewMode = UITextFieldViewModeAlways;
    _addressTF.placeholder = @"address";
    _addressTF.font = NAFont(15);
    _addressTF.textColor = [UIColor clearColor];
    _addressTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    _addressTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    _addressTF.contentLbl.hidden = NO;
    _addressTF.contentLbl.textColor = [UIColor blackColor];
    
    [_scrollView addSubview:_fromView];
    [_fromView addSubview:fromLbl];
    [_fromView addSubview:_accountTF];
    [_fromView addSubview:_addressTF];
    
    [self setupFromData];
    
}

- (void)setupFromData
{
    _accountTF.text = [WALLET nicknameForAccount:[Address addressWithString:_checksumAddress]];
    
    _addressTF.text = _checksumAddress;
    _accountTF.userInteractionEnabled = NO;
    _addressTF.userInteractionEnabled = NO;
}

- (void)setupTo
{
    _toView = [[UIView alloc] initWithFrame:CGRectMake(0, _fromView.ddy_bottom + 10, DDYSCREENW, 230)];
    _toView.backgroundColor = [UIColor whiteColor];
 
    UILabel *toLbl = [[UILabel alloc] init];
    toLbl.frame = CGRectMake(20, 20, 100, 20);
    toLbl.font = NA_FONT(18);
    toLbl.textColor = LC_RGB(51, 51, 51);;
    toLbl.text = @"To :";
    
    _addressTF2 = [[NATextField alloc] initWithFrame:CGRectMake(20, toLbl.ddy_bottom + 10, DDYSCREENW - 20 * 2, 40)];
    UILabel *leftLbl = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 75, 40)];
    leftLbl.text = @"Address : ";
    leftLbl.textColor = [UIColor blackColor];
    leftLbl.font = NA_FONT(15);
    
    _addressTF2.leftView = leftLbl;
    _addressTF2.leftViewMode = UITextFieldViewModeAlways;
    _addressTF2.placeholder = @"address";
    _addressTF2.font = NA_FONT(15);
    _addressTF2.textColor = [UIColor clearColor];
    _addressTF2.clearButtonMode = UITextFieldViewModeWhileEditing;
    _addressTF2.delegate = self;
    _addressTF2.text = _toAddress;
    _addressTF2.contentLbl.hidden = NO;
    _addressTF2.contentLbl.textColor = [UIColor blackColor];

    
    _moneyTF = [[NATextField alloc] initWithFrame:CGRectMake(20, _addressTF2.ddy_bottom + 10, DDYSCREENW - 20 * 2, 40)];
    _moneyTF.keyboardType = UIKeyboardTypeDecimalPad;
    
    UILabel *leftLbl2 = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 75, 40)];
    leftLbl2.text = @"Amount : ";
    leftLbl2.textColor = [UIColor blackColor];
    leftLbl2.font = NA_FONT(15);
    _moneyTF.leftView = leftLbl2;
    _moneyTF.leftViewMode = UITextFieldViewModeAlways;
    _moneyTF.placeholder = @"amount";
    _moneyTF.font = NA_FONT(14);
    _moneyTF.textColor = [UIColor blackColor];
    _moneyTF.clearButtonMode = UITextFieldViewModeWhileEditing;
    _moneyTF.text = _amount;
    
    UILabel *rightLbl = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 50, 40)];
    rightLbl.text = (self.row == 0 ? @"ETH" : @"FFT");
    rightLbl.font = NA_FONT(15);
    _moneyTF.rightView = rightLbl;
    _moneyTF.rightViewMode = UITextFieldViewModeAlways;
    
    // 矿工费用
    _feeLbl = [[UILabel alloc] initWithFrame:CGRectMake(20, _moneyTF.ddy_bottom + 10, DDYSCREENW - 2 * 20, 30)];
    _feeLbl.text = @"Cost of miners  0 ETHER";
    _feeLbl.font = NA_FONT(15);
    _feeLbl.textColor = LC_RGB(151,151,151);
    
    
    _changeGasBtn = [DDYButton buttonWithType:UIButtonTypeCustom];
    _changeGasBtn.btnStyle = DDYStyleImgRight;
    [_changeGasBtn addTarget:self action:@selector(changeGasBtnClk:) forControlEvents:UIControlEventTouchUpInside];
    _changeGasBtn.frame = CGRectMake(DDYSCREENW - 70, _feeLbl.ddy_y, 50, _feeLbl.ddy_h);
    [_changeGasBtn setTitle:@"ETH" forState:UIControlStateNormal];
    [_changeGasBtn setTitleColor:APP_MAIN_COLOR forState:UIControlStateNormal];
    [_changeGasBtn setImage:[UIImage imageNamed:@"transaction_down"] forState:UIControlStateNormal];
    [_changeGasBtn setImage:[UIImage imageNamed:@"transaction_up"] forState:UIControlStateSelected];
    _changeGasBtn.titleLabel.font = NA_FONT(15);
    _changeGasBtn.titleLabel.textAlignment = NSTextAlignmentLeft;
    _changeGasBtn.titleLabel.ddy_x = 0;
    _changeGasBtn.hidden = !(_row != 0);
    
    _slider = [[UISlider alloc] initWithFrame:CGRectMake(20, _feeLbl.ddy_bottom + 20, DDYSCREENW - 2 * 20, 10)];
    [_slider addTarget:self action:@selector(sliderValueChanged:) forControlEvents:UIControlEventValueChanged];
    _slider.minimumTrackTintColor = APP_MAIN_COLOR;
    _slider.thumbTintColor = APP_MAIN_COLOR;
    _slider.value = 0;
    
    [_scrollView addSubview:_toView];
    [_toView addSubview:toLbl];
    [_toView addSubview:_addressTF2];
    [_toView addSubview:_moneyTF];
    [_toView addSubview:_feeLbl];
    [_toView addSubview:_changeGasBtn];
    [_toView addSubview:_slider];
    
}

- (void)setupBottom
{
    UILabel *rightLbl = [[UILabel alloc] initWithFrame:CGRectMake(0, _toView.ddy_bottom + 15, DDYSCREENW - 25, 30)];
    rightLbl.text = @"Available balance account";
    rightLbl.font = NA_FONT(15);
    rightLbl.textAlignment = NSTextAlignmentRight;
    
    _surplussLbl = [[UILabel alloc] initWithFrame:CGRectMake(10, rightLbl.ddy_bottom + 10, DDYSCREENW - 35, 35)];
    _surplussLbl.textAlignment = NSTextAlignmentRight;
    _surplussLbl.font = NA_FONT(23);
    
    NSString *tempStr = LC_NSSTRING_FORMAT(@"%@ %@", _price ?: @"0", (_row == 0 ? @"ETH" : @"FFT"));
    NSMutableAttributedString *attrStr = [[NSMutableAttributedString alloc] initWithString:tempStr];
    [attrStr addAttribute:NSFontAttributeName value:NA_FONT(16) range:(_row == 0 ? [tempStr rangeOfString:@"ETH"] : [tempStr rangeOfString:@"FFT"])];
    _surplussLbl.attributedText = attrStr;
    
    // 当进行fft转账时,默认消费eth的gas;
    _ethPriceLbl = [[UILabel alloc] initWithFrame:CGRectMake(10, _surplussLbl.ddy_bottom + 10, DDYSCREENW - 35, 35)];
    _ethPriceLbl.textAlignment = NSTextAlignmentRight;
    _ethPriceLbl.font = NA_FONT(23);
    _ethPriceLbl.hidden = !(_row != 0);
    
    NSString *tempStr1 = LC_NSSTRING_FORMAT(@"%@ ETH", _ethPrice ?: @"0");
    NSMutableAttributedString *attrStr1 = [[NSMutableAttributedString alloc] initWithString:tempStr1];
    [attrStr1 addAttribute:NSFontAttributeName value:NA_FONT(16) range:[tempStr1 rangeOfString:@"ETH"]];
    _ethPriceLbl.attributedText = attrStr1;
    
    _confirmBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [_confirmBtn addTarget:self action:@selector(confirmBtnClk) forControlEvents:UIControlEventTouchUpInside];
    
    CGFloat confirmY = (_row == 0 ? (_surplussLbl.ddy_bottom + 25) : (_ethPriceLbl.ddy_bottom + 25));
    _confirmBtn.frame = CGRectMake(37.5, confirmY, DDYSCREENW - 2 * 37.5, 45);
    _confirmBtn.layer.cornerRadius = 45.0 / 2;
    _confirmBtn.layer.borderColor = APP_MAIN_COLOR.CGColor;
    _confirmBtn.layer.borderWidth = 1;
    [_confirmBtn setTitle: (!_isWatch ? @"Confirm to transfer" : @"观察者不可以进行交易") forState:UIControlStateNormal];
    [_confirmBtn setTitleColor:LC_RGB(51, 51, 51) forState:UIControlStateNormal];
    _confirmBtn.titleLabel.font = NA_FONT(16);
    [_confirmBtn setBackgroundColor:(!_isWatch ? APP_MAIN_COLOR : [UIColor lightGrayColor])];
    _confirmBtn.userInteractionEnabled = !_isWatch;
    
    [_scrollView addSubview:rightLbl];
    [_scrollView addSubview:_surplussLbl];
    [_scrollView addSubview:_ethPriceLbl];
    [_scrollView addSubview:_confirmBtn];
    
}

- (void)textFieldDidEndEditing:(UITextField *)textField
{
    _addressTF2.textColor = [UIColor clearColor];
    _addressTF2.contentLbl.textColor = [UIColor blackColor];
}

- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField
{
    _addressTF2.textColor = [UIColor blackColor];
    _addressTF2.contentLbl.textColor = [UIColor clearColor];
    
    return YES;
}


#pragma mark - changeGasBtnClk
- (void)changeGasBtnClk:(UIButton *)sender
{
    
    //配置零：内容配置
    NSArray *menuArray =
    @[
      
      [KxMenuItem menuItem:@"ETH"
                     image:nil
                    target:self
                    action:@selector(pushMenuItem:)],
      
      [KxMenuItem menuItem:@"FFT"
                     image:nil
                    target:self
                    action:@selector(pushMenuItem:)],
      ];
    
    //配置一：基础配置
    [KxMenu setTitleFont:[UIFont fontWithName:@"HelveticaNeue" size:15]];
    
    //配置二：拓展配置
    OptionalConfiguration options = {  .arrowSize =  9,  //指示箭头大小
        .marginXSpacing =  7,  //MenuItem左右边距
        .marginYSpacing =  9,  //MenuItem上下边距
        .intervalSpacing =  25,  //MenuItemImage与MenuItemTitle的间距
        .menuCornerRadius =  6.5,  //菜单圆角半径
        .maskToBackground =  true,  //是否添加覆盖在原View上的半透明遮罩
        .shadowOfMenu =  false,  //是否添加菜单阴影
        .hasSeperatorLine =  true,  //是否设置分割线
        .seperatorLineHasInsets =  false,  //是否在分割线两侧留下Insets
        .textColor =  {.R= 0, .G= 0, .B= 0},  //menuItem字体颜色
        .menuBackgroundColor =  {.R= 1, .G= 1, .B= 1,.A = 1}  //菜单的底色
    };
    
    CGRect frame = CGRectMake(sender.ddy_x, 64 + _toView.ddy_y + sender.ddy_bottom - _scrollView.contentOffset.y, 30, 0);
    //菜单展示
    [KxMenu showMenuInView:([UIApplication sharedApplication].keyWindow) fromRect:frame menuItems:menuArray withOptions:options];
    
    
}

- (void)pushMenuItem:(KxMenuItem *)sender
{
    if ([sender.title isEqualToString:@"ETH"])
    {
        [_changeGasBtn setTitle:@"ETH" forState:UIControlStateNormal];
        
        _isFftGas = NO;
        [self getGasData];
        
        
    }else if ([sender.title isEqualToString:@"FFT"]) {
        
        [_changeGasBtn setTitle:@"FFT" forState:UIControlStateNormal];
        
        _isFftGas = YES;
        [self getGasData];
    }
}


- (void)tapAction
{
    [self.view endEditing:YES];
}

- (void)confirmBtnClk
{
    BOOL isValidate = [self isValidateCheck];
    
    if (!isValidate) {
        
        return;
    }
    
    [self getNonce:^(NSInteger non) {
        
        [self showAlertViewWithTitle:@"请输入密码" message:nil delegate:self isShowPwd:YES cancelButtonTitle:@"取消" otherButtonTitles:@"确定", nil];
        
    }];
    
}

#pragma mark - 获取交易编号

- (void)getNonce:(void (^)(NSInteger non))nonce
{
    NSDictionary *params = @{@"address" : _addressTF.text};
    
#warning tmp: 只有代理用的是"getNonce", 其他用的是"getEthNonce"
    NSString *action = _isFftGas ? @"getNonce" : @"getEthNonce";
    
    [NANetWorkRequest na_getDataWithModule:@"account" action:action parameters:params results:^(BOOL status, NSDictionary *result) {
        
        if (status) {
            
            NSDictionary *resultData = [result objectForKey:@"data"];
            
            _nonce = [resultData objectForKey:@"nonce"];
            
            if (nonce) {
                nonce([_nonce integerValue]);
            }
        }
    }];
    
}

#pragma mark - 无效检测
- (BOOL)isValidateCheck
{
    if ([_addressTF2.text isEqualToString:@""] || [_moneyTF.text isEqualToString:@""]) {
        
        [self showAlertViewWithTitle:@"请输入完整信息" message:nil delegate:nil isShowPwd:NO  cancelButtonTitle:@"OK" otherButtonTitles:nil];
        
        return NO;
    }
    
    return ([self checkInputOutOfMoney]);
    
}

#pragma mark - 检测输入金额是否越界
- (BOOL)checkInputOutOfMoney
{
    if (_row == 0) {
        
        if (([_moneyTF.text floatValue] + _slider.value) > [_price floatValue]) {
            
            [self showAlertViewWithTitle:@"余额不足" message:nil delegate:nil isShowPwd:NO cancelButtonTitle:@"OK" otherButtonTitles:nil];
            
            return NO;
        }else {
            return YES;
        }
        
    }else {
        
        if (!_isFftGas) { // 消耗ethgas
            
            if ([_moneyTF.text floatValue] > [_price floatValue]) {
                
                [self showAlertViewWithTitle:@"FFT余额不足" message:nil delegate:nil isShowPwd:NO cancelButtonTitle:@"OK" otherButtonTitles:nil];
                
                return NO;
                
            } else if (_slider.value > [_ethPrice floatValue]) {
                
                [self showAlertViewWithTitle:@"ETH余额不足" message:nil delegate:nil isShowPwd:NO cancelButtonTitle:@"OK" otherButtonTitles:nil];
                return NO;
                
            }else {
                return YES;
            }
            
        }else { // 消耗fftgas
            
            if (([_moneyTF.text floatValue] + _slider.value) > [_price floatValue]) {
                
                [self showAlertViewWithTitle:@"余额不足" message:nil delegate:nil isShowPwd:NO cancelButtonTitle:@"OK" otherButtonTitles:nil];
                
                return NO;
            }else {
                return YES;
            }
            
        }
        
    }
    
}

- (void)sliderValueChanged:(UISlider *)slider
{
    NSString *textOrign = [NSString stringWithFormat:@"Cost of miners   %f ETHER", slider.value];
    NSMutableAttributedString *attribute = [[NSMutableAttributedString alloc] initWithString:textOrign];
    [attribute addAttribute:NSForegroundColorAttributeName value:LC_RGB(51,51,51) range:[textOrign rangeOfString:@"矿工费用"]];
    
    _feeLbl.attributedText = attribute;
}

@end

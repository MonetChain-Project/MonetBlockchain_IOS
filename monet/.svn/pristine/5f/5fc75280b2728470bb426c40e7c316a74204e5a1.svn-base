//
//  FFChatDataBase.m
//  FireFly
//
//  Created by LingTuan on 17/10/17.
//  Copyright © 2017年 NAT. All rights reserved.
//

#import "FFChatDataBase.h"

/** 单聊   chat_0_消息id  MD5 加密 */
/** 讨论组 chat_1_讨论组id MD5 加密 */
/** 群组   chat_2_群组id  MD5 加密 */
/** 系统   chat_3_系统id  MD5 加密 */
#define ChatTable(chatType,chatID)  DDYStrFormat(@"Chat_%@_%@",chatType,[chatID ddy_MD5])

@interface FFChatDataBase ()

@property (nonatomic, strong) FMDatabaseQueue *dbQueue;

@end

@implementation FFChatDataBase

#pragma mark - 单例对象

static FFChatDataBase *_instance;

+ (instancetype)sharedInstance {
    return [[self alloc] init];
}

+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _instance = [super allocWithZone:zone];
    });
    return _instance;
}

- (id)copyWithZone:(NSZone *)zone {
    return _instance;
}

- (id)mutableCopyWithZone:(NSZone *)zone {
    return _instance;
}

- (instancetype)init {
    if (self = [super init]) {
        [FFFileManager createAllDirectory];
        [self openDB];
    }
    return self;
}

#pragma mark - 打开、创建、关闭操作
#pragma mark 打开数据库
- (void)openDB {
    self.dbQueue = [FMDatabaseQueue databaseQueueWithPath:FFChatDBPath];
}

#pragma mark 关闭数据库
- (void)closeDB {
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        _remoteID = nil;
        [db close];
    }];
}

#pragma mark 创建数据表
- (void)createChatTable:(NSString *)tableName {
    
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        if (![db tableExists:tableName]) {
            NSString *sql = FFCreateTable(tableName, @"(timeStamp INTEGER, chatType INTEGER, messageSendState INTEGER, messageReadState INTEGER, uidFrom TEXT, uidTo TEXT, nickName TEXT, messageID TEXT, remoteID TEXT, groupName TEXT, content TEXT, PRIMARY KEY(messageID))");
            [db executeUpdate:sql];
            [self createIndex:db tableName:tableName];
        }
    }];
}

#pragma mark 创建索引
- (void)createIndex:(FMDatabase *)db tableName:(NSString *)tableName {
    [db executeUpdate:DDYStrFormat(@"CREATE INDEX IF NOT EXISTS index1 ON %@ (timeStamp)",tableName)];
    [db executeUpdate:DDYStrFormat(@"CREATE INDEX IF NOT EXISTS index2 ON %@ (messageID)",tableName)];
    [db executeUpdate:DDYStrFormat(@"CREATE INDEX IF NOT EXISTS index3 ON %@ (messageSendState)",tableName)];
    [db executeUpdate:DDYStrFormat(@"CREATE INDEX IF NOT EXISTS index4 ON %@ (messageReadState)",tableName)];
}

#pragma mark - 升级
#pragma mark 升级内容:
- (void)update_1_0_0:(FMDatabase *)db {
    
}

#pragma mark 升级内容:
- (void)update_1_0_1:(FMDatabase *)db {
    
}

#pragma mark - 增删改查
#pragma mark 保存消息 同时可以修改
- (void)saveMessage:(FFMessage *)message {
    NSString *tableName = ChatTable(@(message.chatType), message.remoteID);
    [self createChatTable:tableName];
    
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        FFMessage *msg  = [[FFMessage alloc] init];
        msg.timeStamp   = message.timeStamp;
        msg.chatType    = message.chatType;
        msg.uidFrom     = message.uidFrom;
        msg.uidTo       = message.uidTo;
        msg.nickName    = message.nickName;
        msg.messageID   = message.messageID;
        msg.remoteID    = message.remoteID;
        msg.content     = message.content;
        msg.groupName   = message.groupName;
        
        
        if ([message.uidFrom isEqualToString:SystemLocalID]) { // 在remoteID的聊天中，系统发送
            msg.messageSendState = FFMessageSendStateSuccess;
            msg.messageReadState = FFMessageReadStateRead;
        } else if ([message.uidFrom isEqualToString:[[FFLoginDataBase sharedInstance] activeUser]]) { // 在remoteID的聊天中，我本人发送
            msg.messageSendState = message.messageSendState;
            msg.messageReadState = FFMessageReadStateRead;
        } else { // 在remoteID的聊天中，他人发送
            msg.messageSendState = FFMessageSendStateSuccess;
            msg.messageReadState = [_remoteID isEqualToString:message.remoteID] ? FFMessageReadStateRead : message.messageReadState;
        }
        
        [db executeUpdate:DDYStrFormat(@"REPLACE INTO %@ (timeStamp, chatType, messageSendState, messageReadState, uidFrom, uidTo, nickName, messageID, remoteID, groupName, content) VALUES ('%@', '%@', '%@', '%@', '%@', '%@', '%@', '%@', '%@', '%@', ?)", tableName, @(msg.timeStamp), @(msg.chatType), @(msg.messageSendState), @(msg.messageReadState), msg.uidFrom, msg.uidTo, msg.nickName, msg.messageID, msg.remoteID, msg.groupName), msg.content];
    }];
}

#pragma mark 获取聊天列表
//- (void)getChatListCallBack:(void(^)(FFMessage *message, NSInteger unread))callBack {
//    [self.dbQueue inDatabase:^(FMDatabase *db) {
//        FMResultSet *result = [db executeQuery:@"SELECT * FROM sqlite_master WHERE TYPE = 'table'"];
//        NSMutableArray *tableArray = [NSMutableArray array];
//        while (result.next) {
//            [tableArray addObject:[result stringForColumnIndex:1]];
//        }
//        
//        for (NSString *tableName in tableArray) {
//            NSMutableArray *array = [self selectRange:NSMakeRange(0, 1) dataBase:db tableName:tableName];
//            [self unreadNumber:db tableName:tableName];
//        }
//    }];
//}

#pragma mark 获取某个表中未读数
- (void)unreadNumberWithChatType:(FFChatType)chatType remoteID:(NSString *)remoteID callBack:(void(^)(NSInteger unread))callBack {
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        if (callBack) {
            callBack([self unreadNumber:db tableName:ChatTable(@(chatType), remoteID)]);
        }
    }];
}

- (NSInteger)unreadNumber:(FMDatabase *)db tableName:(NSString *)tableName {
    return [db intForQuery:DDYStrFormat(@"SELECT COUNT(*) FROM %@ WHERE messageReadState = '0'", tableName)];
}

#pragma mark 从location处查询length条内容
- (void)selectRange:(NSRange)range chatType:(FFChatType)chatType remoteID:(NSString *)remoteID callBack:(void(^)(NSMutableArray <FFMessage *>* array))callBack {
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        if (callBack) {
            callBack([self selectRange:range dataBase:db tableName:ChatTable(@(chatType), remoteID)]);
        }
    }];
}

- (NSMutableArray <FFMessage *>*)selectRange:(NSRange)range dataBase:(FMDatabase *)db tableName:(NSString *)tableName {
    NSString *sql = DDYStrFormat(@"SELECT * FROM %@ ORDER BY rowid desc limit %lu,%lu", tableName, range.location, range.length);
    FMResultSet *result = [db executeQuery:sql];
    NSMutableArray *array = [NSMutableArray array];
    while (result.next) {
        FFMessage *message  = [[FFMessage alloc] init];
        message.timeStamp        = [result intForColumn:@"timeStamp"];
        message.chatType         = (FFChatType)[result intForColumn:@"chatType"];
        message.messageSendState = (FFMessageSendState)[result intForColumn:@"messageSendState"];
        message.messageReadState = (FFMessageReadState)[result intForColumn:@"messageReadState"];
        message.uidFrom          = [result stringForColumn:@"uidFrom"];
        message.uidTo            = [result stringForColumn:@"uidTo"];
        message.nickName         = [result stringForColumn:@"nickName"];
        message.messageID        = [result stringForColumn:@"messageID"];
        message.remoteID         = [result stringForColumn:@"remoteID"];
        message.groupName        = [result stringForColumn:@"groupName"];
        message.content          = [result stringForColumn:@"content"];
        [array addObject:message];
    }
    return (NSMutableArray *)[[array reverseObjectEnumerator] allObjects];
}

#pragma mark 清空未读消息 清除小红点或进入remoteID聊天时
- (void)cleanUnreadWithChatType:(FFChatType)chatType remoteID:(NSString *)remoteID callBack:(void (^)(BOOL))callBack {
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        NSString *tableName = ChatTable(@(chatType), remoteID);
        NSString *sql = DDYStrFormat(@"UPDATE %@ SET messageReadState = '1'", tableName);
        BOOL finish = [db executeUpdate:sql];
        if (callBack) {
            callBack(finish);
        }
    }];
}

#pragma mark 删除某条消息 在remoteID聊天框删除单条消息
- (void)deleteMessage:(NSString *)messageID chatType:(FFChatType)chatType remoteID:(NSString *)remoteID callBack:(void(^)(BOOL finish))callBack {
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        NSString *tableName = ChatTable(@(chatType), remoteID);
        BOOL finish = [db executeUpdate:@"DELETE FROM %@ WHERE messageID = '%@'",tableName, messageID];
        if (callBack) {
            callBack(finish);
        }
    }];
}

#pragma mark 删除所有消息 清空数据表 删除在remoteID聊天列表使用
- (void)deleteAllWithChatType:(FFChatType)chatType remoteID:(NSString *)remoteID callBack:(void(^)(BOOL finish))callBack {
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        NSString *tableName = ChatTable(@(chatType), remoteID);
        BOOL finish = [db executeUpdate:DDYStrFormat(@"DELETE FROM %@", tableName)];
        if (callBack) {
            callBack(finish);
        }
    }];
}
#pragma mark 删除所有数据表
- (void)deleteAllChatDataBase:(void(^)(BOOL finish))callBack {
    [self.dbQueue inDatabase:^(FMDatabase *db) {
        FMResultSet *result = [db executeQuery:@"SELECT * FROM sqlite_master WHERE TYPE = 'table'"];
        NSMutableArray *tableArray = [NSMutableArray array];
        while (result.next) {
            [tableArray addObject:[result stringForColumnIndex:1]];
        }
        
        for (NSString *tableName in tableArray) {
            [db executeUpdate:DDYStrFormat(@"DROP TABLE IF EXISTS %@", tableName)];
        }
        if (callBack) {
            callBack(YES);
        }
    }];
}

@end


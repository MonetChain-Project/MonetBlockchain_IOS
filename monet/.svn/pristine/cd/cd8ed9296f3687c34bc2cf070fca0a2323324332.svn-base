//
//  FFMessageCellModel.m
//  FireFly
//
//  Created by LingTuan on 17/9/26.
//  Copyright © 2017年 NAT. All rights reserved.
//

#import "FFMessageCellModel.h"

@implementation FFMessageCellModel

- (void)setMessage:(FFMessage *)message {
    _message = message;
    
    
    if (message.messageFrom == FFMessageFromMyself)
    {
        [self senderLayout];
    }
    else if (message.messageFrom == FFMessageFromOthers)
    {
        [self receiverLayout];
    }
    else if (message.messageFrom == FFMessageFromSystem)
    {
        [self systemLayout];
    }
}

- (void)senderLayout
{
    // ---------------------------------- 公共部分 ---------------------------------- //
    // 头像
    _avatarFrame = CGRectMake(DDYSCREENW-ChatMargin-ChatHeadWH, ChatMargin, ChatHeadWH, ChatHeadWH);
    
    switch (_message.messageType)
    {
        case FFMessageTypeText:
        {
            CGSize  textSize = [_message.textContent sizeWithMaxWidth:ChatTextMaxW font:ChatTextFont];
            
            CGFloat bubbleW = textSize.width + 2*ChatMargin+ChatTriangleW;
            CGFloat bubbleH = textSize.height + 2*ChatMargin;
            CGFloat bubbleX = CGRectGetMinX(_avatarFrame)-ChatHeadToBubble-bubbleW;
            CGFloat bubbleY = ChatMargin;
            _bubbleFrame = CGRectMake(bubbleX, bubbleY, bubbleW, bubbleH);
            
            CGFloat textX = CGRectGetMinX(_bubbleFrame)+ChatMargin;
            CGFloat textY = bubbleY+ChatMargin;
            CGFloat textW = textSize.width;
            CGFloat textH = textSize.height;
            _textFrame = CGRectMake(textX, textY, textW, textH);
        }
            break;
        case FFMessageTypeImg:
        {
            CGSize imageSize = CGSizeMake(40, 40);
            UIImage *image = [FFFileManager imageWithURL:DDYURLStr(_message.fileURL) peerID:_message.uidTo];
            if (image) {
                imageSize = [self scaleImageToFit:image];
            }
            
            CGFloat bubbleW = imageSize.width + 2*ChatMargin+ChatTriangleW;
            CGFloat bubbleH = imageSize.height + 2*ChatMargin;
            CGFloat bubbleX = CGRectGetMinX(_avatarFrame)-ChatHeadToBubble-bubbleW;
            CGFloat bubbleY = ChatMargin;
            _bubbleFrame = CGRectMake(bubbleX, bubbleY, bubbleW, bubbleH);
            
            CGFloat imageX = CGRectGetMinX(_bubbleFrame)+ChatMargin;
            CGFloat imageY = bubbleY+ChatMargin;
            CGFloat imageW = imageSize.width;
            CGFloat imageH = imageSize.height;
            _imageFrame = CGRectMake(imageX, imageY, imageW, imageH);
        }
            break;
        case FFMessageTypeImgGroup:
        {
            
        }
            break;
        case FFMessageTypeGif:
        {
            
        }
            break;
        case FFMessageTypeVoice:
        {
            
        }
            break;
        case FFMessageTypeLocation:
        {
            
        }
            break;
        case FFMessageTypeTextURL:
        {
            
        }
            break;
        case FFMessageTypeTextImg:
        {
            
        }
            break;
        case FFMessageTypeFileDoc:
        {
            
        }
            break;
        case FFMessageTypeFilePdf:
        {
            
        }
            break;
        case FFMessageTypeFilePpt:
        {
            
        }
            break;
        case FFMessageTypeFileXls:
        {
            
        }
            break;
        case FFMessageTypeFileTxt:
        {
            
        }
            break;
        case FFMessageTypeFileMp3:
        {
            
        }
            break;
        case FFMessageTypeFileZip:
        {
            
        }
            break;case FFMessageTypeFileRar:
        {
            
        }
            break;
        case FFMessageTypeFile:
        {
            
        }
            break;
        case FFMessageTypeExecutive:
        {
            
        }
            break;
    }
    _cellHeight = MAX(CGRectGetMaxY(_avatarFrame), CGRectGetMaxY(_bubbleFrame))+2*ChatMargin;
}

- (void)receiverLayout
{
    // ---------------------------------- 公共部分 ---------------------------------- //
    // 头像
    _avatarFrame = CGRectMake(ChatMargin, ChatMargin, ChatHeadWH, ChatHeadWH);
    
    switch (_message.messageType)
    {
        case FFMessageTypeText:
        {
            CGSize  textSize = [_message.textContent sizeWithMaxWidth:ChatTextMaxW font:ChatTextFont];
            
            CGFloat bubbleW = textSize.width + 2*ChatMargin+ChatTriangleW;
            CGFloat bubbleH = textSize.height + 2*ChatMargin;
            CGFloat bubbleX = CGRectGetMaxX(_avatarFrame)+ChatHeadToBubble;
            CGFloat bubbleY = 2.5*ChatMargin;
            _bubbleFrame = CGRectMake(bubbleX, bubbleY, bubbleW, bubbleH);
            
            CGFloat textX = CGRectGetMinX(_bubbleFrame)+ChatMargin+ChatTriangleW;
            CGFloat textY = bubbleY+ChatMargin;
            CGFloat textW = textSize.width;
            CGFloat textH = textSize.height;
            _textFrame = CGRectMake(textX, textY, textW, textH);
        }
            break;
        case FFMessageTypeImg:
        {
            CGSize imageSize = CGSizeMake(40, 40);
            UIImage *image = [FFFileManager imageWithURL:DDYURLStr(_message.fileURL) peerID:_message.uidFrom];
            if (image) {
                imageSize = [self scaleImageToFit:image];
            }
            CGFloat bubbleW = imageSize.width + 2*ChatMargin+ChatTriangleW;
            CGFloat bubbleH = imageSize.height + 2*ChatMargin;
            CGFloat bubbleX = CGRectGetMaxX(_avatarFrame)+ChatHeadToBubble;
            CGFloat bubbleY = ChatMargin;
            _bubbleFrame = CGRectMake(bubbleX, bubbleY, bubbleW, bubbleH);
            
            CGFloat imageX = CGRectGetMinX(_bubbleFrame)+ChatMargin+ChatTriangleW;
            CGFloat imageY = bubbleY+ChatMargin;
            CGFloat imageW = imageSize.width;
            CGFloat imageH = imageSize.height;
            _imageFrame = CGRectMake(imageX, imageY, imageW, imageH);
        }
            break;
        case FFMessageTypeImgGroup:
        {
            
        }
            break;
        case FFMessageTypeGif:
        {
            
        }
            break;
        case FFMessageTypeVoice:
        {
            
        }
            break;
        case FFMessageTypeLocation:
        {
            
        }
            break;
        case FFMessageTypeTextURL:
        {
            
        }
            break;
        case FFMessageTypeTextImg:
        {
            
        }
            break;
        case FFMessageTypeFileDoc:
        {
            
        }
            break;
        case FFMessageTypeFilePdf:
        {
            
        }
            break;
        case FFMessageTypeFilePpt:
        {
            
        }
            break;
        case FFMessageTypeFileXls:
        {
            
        }
            break;
        case FFMessageTypeFileTxt:
        {
            
        }
            break;
        case FFMessageTypeFileMp3:
        {
            
        }
            break;
        case FFMessageTypeFileZip:
        {
            
        }
            break;case FFMessageTypeFileRar:
        {
            
        }
            break;
        case FFMessageTypeFile:
        {
            
        }
            break;
        case FFMessageTypeExecutive:
        {
            
        }
            break;
    }
    
    _cellHeight = MAX(CGRectGetMaxY(_avatarFrame), CGRectGetMaxY(_bubbleFrame))+2*ChatMargin;
}

- (void)systemLayout {
    CGSize textSize = [_message.textContent sizeWithMaxWidth:DDYSCREENW-40 font:ChatTimeFont];
    _tipLabelFrame = CGRectMake(20, ChatMargin, textSize.width+14, textSize.height+10);
    _cellHeight = CGRectGetMaxY(_tipLabelFrame)+ChatMargin;
}

- (CGSize)scaleImageToFit:(UIImage *)image {
    CGFloat scaleW = image.size.width *ChatImgWH/MAX(image.size.width, image.size.height);
    CGFloat scaleH = image.size.height*ChatImgWH/MAX(image.size.width, image.size.height);
    return CGSizeMake(scaleW, scaleH);
}

@end
